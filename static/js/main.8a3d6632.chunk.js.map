{"version":3,"sources":["components/TodoList.js","components/Footer.js","App.js","index.js"],"names":["TodoList","todos","handleCompleted","deleteTodo","className","map","todo","key","id","classNames","completed","type","name","checked","onChange","htmlFor","title","onClick","Footer","filter","setFilter","clearCompleted","itemsLeft","clearVisibleButton","href","selected","event","target","filters","App","state","todoTitle","isVisible","selectedFilter","handleTitleChange","e","setState","value","handleCreateNewTodo","preventDefault","newTitle","length","todoCompleted","find","getFilteredTodos","handleDeleteTodo","footerIsVisible","handleClearCompleted","handleCompletedAll","this","filteredTodos","onSubmit","placeholder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a3d6632.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst TodoList = ({ todos, handleCompleted, deleteTodo }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <li\n        key={todo.id}\n        className={classNames({ completed: todo.completed })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${todo.id}`}\n            name={todo.id}\n            checked={todo.completed}\n            onChange={handleCompleted}\n          />\n          <label htmlFor={`todo-${todo.id}`}>\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(todo.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  handleCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Footer = ({\n  filter,\n  setFilter,\n  clearCompleted,\n  itemsLeft,\n  clearVisibleButton,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {`${itemsLeft} items left`}\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          name=\"All\"\n          className={classNames({ selected: filter === 'All' })}\n          onClick={event => setFilter(event.target.name)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/\"\n          name=\"Active\"\n          className={classNames({ selected: filter === 'Active' })}\n          onClick={event => setFilter(event.target.name)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/\"\n          name=\"Completed\"\n          className={classNames({ selected: filter === 'Completed' })}\n          onClick={event => setFilter(event.target.name)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    {clearVisibleButton && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    )}\n  </footer>\n);\n\nFooter.propTypes = {\n  itemsLeft: PropTypes.number.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  clearVisibleButton: PropTypes.bool.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport Footer from './components/Footer';\n\nconst filters = {\n  all: 'All',\n  completed: 'Completed',\n  active: 'Active',\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todoTitle: '',\n    isVisible: false,\n    selectedFilter: filters.all,\n  }\n\n  handleTitleChange = (e) => {\n    this.setState({\n      todoTitle: e.target.value,\n    });\n  }\n\n  handleCreateNewTodo = (event) => {\n    event.preventDefault();\n    this.setState((state) => {\n      if (state.todoTitle === '') {\n        return false;\n      }\n\n      const newTitle = {\n        id: state.todos.length + 1,\n        title: state.todoTitle,\n        completed: false,\n      };\n\n      return {\n        todos: [...state.todos, newTitle],\n        isVisible: true,\n        todoTitle: '',\n      };\n    });\n  }\n\n  handleCompleted = (e) => {\n    const { checked, name } = e.target;\n\n    this.setState((state) => {\n      const todoCompleted = state.todos.find(todo => todo.id === +name);\n\n      return {\n        todos: [\n          ...state.todos.map((todo) => {\n            if (todo.id === +name) {\n              return {\n                ...todoCompleted,\n                completed: checked,\n              };\n            }\n\n            return todo;\n          }),\n        ],\n      };\n    });\n  }\n\n  getFilteredTodos = () => {\n    const { selectedFilter, todos } = this.state;\n\n    if (selectedFilter === filters.active) {\n      return todos.filter(todo => !todo.completed);\n    }\n\n    if (selectedFilter === filters.completed) {\n      return todos.filter(todo => todo.completed);\n    }\n\n    return todos;\n  }\n\n  setFilter = (selectedFilter) => {\n    this.setState({\n      selectedFilter,\n    });\n  }\n\n  handleDeleteTodo = (id) => {\n    let footerIsVisible = true;\n\n    if (this.state.todos.length <= 1) {\n      footerIsVisible = false;\n    }\n\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.id !== id),\n      isVisible: footerIsVisible,\n    }));\n  }\n\n  handleClearCompleted = () => {\n    let footerIsVisible = true;\n\n    if (this.state.todos.length <= 1) {\n      footerIsVisible = false;\n    }\n\n    this.setState(state => ({\n      todos: state.todos.filter(todo => !todo.completed),\n      isVisible: footerIsVisible,\n    }));\n  }\n\n  handleCompletedAll = ({ target }) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  render() {\n    const { todoTitle, isVisible, selectedFilter, todos } = this.state;\n    const filteredTodos = this.getFilteredTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.handleCreateNewTodo}>\n            <input\n              value={todoTitle}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.handleTitleChange}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={event => this.handleCompletedAll(event)}\n          />\n          {isVisible && (\n            <label\n              htmlFor=\"toggle-all\"\n            >\n              Mark all as completed\n            </label>\n          )}\n\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.handleDeleteTodo}\n            handleCompleted={this.handleCompleted}\n          />\n        </section>\n\n        {isVisible && (\n          <Footer\n            clearCompleted={this.handleClearCompleted}\n            filter={selectedFilter}\n            todos={todos}\n            setFilter={this.setFilter}\n            itemsLeft={todos.filter(todo => !todo.completed).length}\n            clearVisibleButton={\n              todos.filter(todo => todo.completed).length >= 1\n            }\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}